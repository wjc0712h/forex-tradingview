//@version=6
indicator("FX Sessions", overlay = true, max_boxes_count = 30, max_lines_count = 60, max_labels_count = 30)

bool showSessionNames     = input.bool(true, "Show session names")
bool showSessionOC        = input.bool(true, "Draw session open and close lines")
bool showSessionHL        = input.bool(true, "Draw session high and low lines")
bool showSessionTickRange = input.bool(true, "Show tick range for each session")
bool showSessionAverage   = input.bool(true, "Show average price per session")

const string TZ_TOOLTIP_TEXT = "The session's time zone, specified in either GMT notation (e.g., 'GMT-5') or as an IANA time zone database name (e.g., 'America/New_York')." + " We recommend the latter since it includes other time-related changes, such as daylight savings."

const string FIRST_SESSION_GROUP = "First Session"
showFirst         = input.bool(true, "Show session", group = FIRST_SESSION_GROUP, display = display.none)
firstSessionName  = input.string("Tokyo", "Displayed name", group = FIRST_SESSION_GROUP, display = display.none)
firstSessionTime  = input.session("0900-1500", "Session time", group = FIRST_SESSION_GROUP, display = display.none)
firstSessionTZ    = input.string("Asia/Tokyo", "Session timezone", group = FIRST_SESSION_GROUP, display = display.none, tooltip = TZ_TOOLTIP_TEXT)
firstSessionColor = input.color(color.new(#2962FF, 85), "Session color", group = FIRST_SESSION_GROUP)
fopenLineColor    = input.color(color.new(#2962FF, 85), "Open line color", group = FIRST_SESSION_GROUP)
fcloseLineColor   = input.color(color.new(#2962FF, 85), "Close line color", group = FIRST_SESSION_GROUP)
firstHLWidth      = input.int(2, "High/Low Line Width", minval = 1, maxval = 5, group = FIRST_SESSION_GROUP)

const string SECOND_SESSION_GROUP = "Second session"
showSecond         = input.bool(true, "Show session", group = SECOND_SESSION_GROUP, display = display.none)
secondSessionName  = input.string("London", "Displayed name", group = SECOND_SESSION_GROUP, display = display.none)
secondSessionTime  = input.session("0830-1630", "Session time", group = SECOND_SESSION_GROUP, display = display.none)
secondSessionTZ    = input.string("Europe/London", "Session timezone", group = SECOND_SESSION_GROUP, display = display.none, tooltip = TZ_TOOLTIP_TEXT)
secondSessionColor = input.color(color.new(#FF9800, 85), "Session color", group = SECOND_SESSION_GROUP)
sopenLineColor     = input.color(color.gray, "Open line color", group = SECOND_SESSION_GROUP)
scloseLineColor    = input.color(color.black, "Close line color", group = SECOND_SESSION_GROUP)
secondHLWidth      = input.int(2, "High/Low Line Width", minval = 1, maxval = 5, group = SECOND_SESSION_GROUP)

const string THIRD_SESSION_GROUP = "Third session"
showThird         = input.bool(true, "Show session", group = THIRD_SESSION_GROUP, display = display.none)
thirdSessionName  = input.string("New York", "Displayed name", group = THIRD_SESSION_GROUP, display = display.none)
thirdSessionTime  = input.session("0930-1600", "Session time", group = THIRD_SESSION_GROUP, display = display.none)
thirdSessionTZ    = input.string("America/New_York", "Session timezone", group = THIRD_SESSION_GROUP, display = display.none, tooltip = TZ_TOOLTIP_TEXT)
thirdSessionColor = input.color(color.new(#089981, 85), "Session color", group = THIRD_SESSION_GROUP)
topenLineColor     = input.color(color.gray, "Open line color", group = THIRD_SESSION_GROUP)
tcloseLineColor    = input.color(color.black, "Close line color", group = THIRD_SESSION_GROUP)
thirdHLWidth       = input.int(2, "High/Low Line Width", minval = 1, maxval = 5, group = THIRD_SESSION_GROUP)

const string FOURTH_SESSION_GROUP = "Fourth session"
showFourth         = input.bool(true, "Show session", group = FOURTH_SESSION_GROUP, display = display.none)
fourthSessionName  = input.string("Sydney", "Displayed name", group = FOURTH_SESSION_GROUP, display = display.none)
fourthSessionTime  = input.session("1700-0200", "Session time", group = FOURTH_SESSION_GROUP, display = display.none)
fourthSessionTZ    = input.string("Australia/Sydney", "Session timezone", group = FOURTH_SESSION_GROUP, display = display.none, tooltip = TZ_TOOLTIP_TEXT)
fourthSessionColor = input.color(color.new(#9C27B0, 85), "Session color", group = FOURTH_SESSION_GROUP)
ftopenLineColor    = input.color(color.gray, "Open line color", group = FOURTH_SESSION_GROUP)
ftcloseLineColor   = input.color(color.black, "Close line color", group = FOURTH_SESSION_GROUP)
fourthHLWidth      = input.int(2, "High/Low Line Width", minval = 1, maxval = 5, group = FOURTH_SESSION_GROUP)

type SessionDisplay
    box   sessionBox
    label sessionLabel
    line  openLine
    line  avgLine
    line  closeLine
    line  highLine
    line  lowLine
    float sumClose
    int   numOfBars
    float sessionHigh
    float sessionLow
    int   highIndex
    int   lowIndex

type SessionInfo
    color  color
    string name
    string session
    string timezone
    color openLine
    color closeLine
    int    hlLineWidth
    SessionDisplay active = na

method setName(SessionDisplay this, string name) =>
    sessionLabel = this.sessionLabel
    sessionBox = this.sessionBox
    boxText = array.new<string>()
    if showSessionTickRange
        boxText.push("Range: " + str.tostring((sessionBox.get_top() - sessionBox.get_bottom()) / syminfo.mintick, format.mintick))
    if showSessionAverage
        boxText.push("Avg: " + str.tostring(this.sumClose / this.numOfBars, format.mintick))
    if showSessionNames
        boxText.push(name)

    sessionLabel.set_y(sessionBox.get_bottom())
    sessionLabel.set_text(array.join(boxText, "\n"))

method createSessionDisplay(SessionInfo this) =>
    boxColor = this.color
    opaqueColor = color.new(boxColor, 0)
    dis = SessionDisplay.new(sessionBox = box.new(bar_index, high, bar_index, low, bgcolor = boxColor, border_color = na),sessionLabel = label.new(bar_index, low, "", style = label.style_label_upper_left, textalign = text.align_left, textcolor = opaqueColor, color = color(na)),openLine   = showSessionOC ? line.new(bar_index, open, bar_index, open, color = this.openLine, style = line.style_dotted, width = 1) : na,closeLine  = showSessionOC ? line.new(bar_index, close, bar_index, close, color = this.closeLine, style = line.style_dotted, width = 1) : na,highLine   = showSessionHL ? line.new(bar_index, high, bar_index, high, color = this.openLine, style = line.style_solid, width = this.hlLineWidth) : na,lowLine    = showSessionHL ? line.new(bar_index, low, bar_index, low, color = this.closeLine, style = line.style_solid, width = this.hlLineWidth) : na,avgLine    = showSessionAverage ? line.new(bar_index, close, bar_index, close, style = line.style_dotted, width = 2, color = opaqueColor) : na,sumClose   = close,numOfBars  = 1,sessionHigh = high,sessionLow = low,highIndex = bar_index,lowIndex = bar_index)
    linefill.new(dis.openLine, dis.closeLine, boxColor)
    dis.setName(this.name)
    this.active := dis

method updateSessionDisplay(SessionInfo this) =>
    sessionDisp = this.active
    sessionBox = sessionDisp.sessionBox
    openLine = sessionDisp.openLine
    closeLine = sessionDisp.closeLine
    highLine = sessionDisp.highLine
    lowLine = sessionDisp.lowLine
    avgLine = sessionDisp.avgLine
    sessionDisp.sumClose += close
    sessionDisp.numOfBars += 1

    sessionBox.set_top(math.max(sessionBox.get_top(), high))
    sessionBox.set_bottom(math.min(sessionBox.get_bottom(), low))
    sessionBox.set_right(bar_index)
    sessionDisp.setName(this.name)
    float sessionHigh = sessionBox.get_top()
    float sessionLow = sessionBox.get_bottom()
    if high > sessionDisp.sessionHigh
        sessionDisp.sessionHigh := high
        sessionDisp.highIndex := bar_index
    if low < sessionDisp.sessionLow
        sessionDisp.sessionLow := low
        sessionDisp.lowIndex := bar_index

    if showSessionOC
        openLine.set_x2(bar_index)
        closeLine.set_x2(bar_index)
        closeLine.set_y1(close)
        closeLine.set_y2(close)

    int extension = 1
    if showSessionHL
        highLine.set_x1(sessionDisp.highIndex)
        highLine.set_x2(bar_index + extension)
        highLine.set_y1(sessionDisp.sessionHigh)
        highLine.set_y2(sessionDisp.sessionHigh)

        lowLine.set_x1(sessionDisp.lowIndex)
        lowLine.set_x2(bar_index + extension)
        lowLine.set_y1(sessionDisp.sessionLow)
        lowLine.set_y2(sessionDisp.sessionLow)

    if showSessionAverage
        avgLine.set_x2(bar_index)
        avg = sessionDisp.sumClose / sessionDisp.numOfBars
        avgLine.set_y1(avg)
        avgLine.set_y2(avg)
    sessionDisp

method update(SessionInfo this) =>
    bool isChange = timeframe.change("1D")
    if (not na(time("", this.session, this.timezone)))
        if na(this.active) or isChange
            this.createSessionDisplay()
        else
            this.updateSessionDisplay()
    else if not na(this.active)
        this.active := na

getSessionInfos() =>
    array<SessionInfo> sessionInfos = array.new<SessionInfo>()
    if showFourth
        sessionInfos.push(SessionInfo.new(fourthSessionColor, fourthSessionName, fourthSessionTime, fourthSessionTZ, ftopenLineColor, ftcloseLineColor, fourthHLWidth))
    if showThird
        sessionInfos.push(SessionInfo.new(thirdSessionColor, thirdSessionName, thirdSessionTime, thirdSessionTZ, topenLineColor, tcloseLineColor, thirdHLWidth))
    if showSecond
        sessionInfos.push(SessionInfo.new(secondSessionColor, secondSessionName, secondSessionTime, secondSessionTZ, sopenLineColor, scloseLineColor, secondHLWidth))
    if showFirst
        sessionInfos.push(SessionInfo.new(firstSessionColor, firstSessionName, firstSessionTime, firstSessionTZ, fopenLineColor, fcloseLineColor, firstHLWidth))
    sessionInfos

var array<SessionInfo> sessionInfos = getSessionInfos()
if timeframe.isdwm
    runtime.error("This indicator can only be used on intraday timeframes.")

for info in sessionInfos
    info.update()
